// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package parkingslot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParkingSlotServiceClient is the client API for ParkingSlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingSlotServiceClient interface {
	// UpdateParkingSlot creates ParkingSlot record.
	UpdateParkingSlot(ctx context.Context, in *UpdateParkingSlotRequest, opts ...grpc.CallOption) (*UpdateParkingSlotResponse, error)
}

type parkingSlotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingSlotServiceClient(cc grpc.ClientConnInterface) ParkingSlotServiceClient {
	return &parkingSlotServiceClient{cc}
}

func (c *parkingSlotServiceClient) UpdateParkingSlot(ctx context.Context, in *UpdateParkingSlotRequest, opts ...grpc.CallOption) (*UpdateParkingSlotResponse, error) {
	out := new(UpdateParkingSlotResponse)
	err := c.cc.Invoke(ctx, "/parkingslot.ParkingSlotService/UpdateParkingSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingSlotServiceServer is the server API for ParkingSlotService service.
// All implementations must embed UnimplementedParkingSlotServiceServer
// for forward compatibility
type ParkingSlotServiceServer interface {
	// UpdateParkingSlot creates ParkingSlot record.
	UpdateParkingSlot(context.Context, *UpdateParkingSlotRequest) (*UpdateParkingSlotResponse, error)
	mustEmbedUnimplementedParkingSlotServiceServer()
}

// UnimplementedParkingSlotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkingSlotServiceServer struct {
}

func (UnimplementedParkingSlotServiceServer) UpdateParkingSlot(context.Context, *UpdateParkingSlotRequest) (*UpdateParkingSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkingSlot not implemented")
}
func (UnimplementedParkingSlotServiceServer) mustEmbedUnimplementedParkingSlotServiceServer() {}

// UnsafeParkingSlotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingSlotServiceServer will
// result in compilation errors.
type UnsafeParkingSlotServiceServer interface {
	mustEmbedUnimplementedParkingSlotServiceServer()
}

func RegisterParkingSlotServiceServer(s grpc.ServiceRegistrar, srv ParkingSlotServiceServer) {
	s.RegisterService(&ParkingSlotService_ServiceDesc, srv)
}

func _ParkingSlotService_UpdateParkingSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParkingSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingSlotServiceServer).UpdateParkingSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parkingslot.ParkingSlotService/UpdateParkingSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingSlotServiceServer).UpdateParkingSlot(ctx, req.(*UpdateParkingSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingSlotService_ServiceDesc is the grpc.ServiceDesc for ParkingSlotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingSlotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parkingslot.ParkingSlotService",
	HandlerType: (*ParkingSlotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParkingSlot",
			Handler:    _ParkingSlotService_UpdateParkingSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parking/gunk/api/parkingslot/all.proto",
}
