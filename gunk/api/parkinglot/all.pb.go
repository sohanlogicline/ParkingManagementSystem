// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: parking/gunk/api/parkinglot/all.proto

package parkinglot

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBy int32

const (
	OrderBy_DESC OrderBy = 0
	OrderBy_ASC  OrderBy = 1
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	OrderBy_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_parking_gunk_api_parkinglot_all_proto_enumTypes[0].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_parking_gunk_api_parkinglot_all_proto_enumTypes[0]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{0}
}

type ParkingLot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalSpace int32                  `protobuf:"varint,3,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *ParkingLot) Reset() {
	*x = ParkingLot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLot) ProtoMessage() {}

func (x *ParkingLot) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLot.ProtoReflect.Descriptor instead.
func (*ParkingLot) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{0}
}

func (x *ParkingLot) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ParkingLot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParkingLot) GetTotalSpace() int32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *ParkingLot) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ParkingLot) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ParkedVehicles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleNo   string                 `protobuf:"bytes,1,opt,name=VehicleNo,proto3" json:"VehicleNo,omitempty"`
	EntryTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=EntryTime,proto3" json:"EntryTime,omitempty"`
	ParkedHours int32                  `protobuf:"varint,3,opt,name=ParkedHours,proto3" json:"ParkedHours,omitempty"`
	Fee         int32                  `protobuf:"varint,4,opt,name=Fee,proto3" json:"Fee,omitempty"`
	SlotID      string                 `protobuf:"bytes,5,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
}

func (x *ParkedVehicles) Reset() {
	*x = ParkedVehicles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkedVehicles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkedVehicles) ProtoMessage() {}

func (x *ParkedVehicles) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkedVehicles.ProtoReflect.Descriptor instead.
func (*ParkedVehicles) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{1}
}

func (x *ParkedVehicles) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *ParkedVehicles) GetEntryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EntryTime
	}
	return nil
}

func (x *ParkedVehicles) GetParkedHours() int32 {
	if x != nil {
		return x.ParkedHours
	}
	return 0
}

func (x *ParkedVehicles) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ParkedVehicles) GetSlotID() string {
	if x != nil {
		return x.SlotID
	}
	return ""
}

type GetParkingLot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalSpace     int32                  `protobuf:"varint,3,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`
	TotalParked    int32                  `protobuf:"varint,4,opt,name=TotalParked,proto3" json:"TotalParked,omitempty"`
	ParkedVehicles []*ParkedVehicles      `protobuf:"bytes,5,rep,name=ParkedVehicles,proto3" json:"ParkedVehicles,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *GetParkingLot) Reset() {
	*x = GetParkingLot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParkingLot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParkingLot) ProtoMessage() {}

func (x *GetParkingLot) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParkingLot.ProtoReflect.Descriptor instead.
func (*GetParkingLot) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{2}
}

func (x *GetParkingLot) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetParkingLot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetParkingLot) GetTotalSpace() int32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *GetParkingLot) GetTotalParked() int32 {
	if x != nil {
		return x.TotalParked
	}
	return 0
}

func (x *GetParkingLot) GetParkedVehicles() []*ParkedVehicles {
	if x != nil {
		return x.ParkedVehicles
	}
	return nil
}

func (x *GetParkingLot) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetParkingLot) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ParkingLotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingLot *ParkingLot `protobuf:"bytes,1,opt,name=ParkingLot,proto3" json:"ParkingLot,omitempty"`
}

func (x *ParkingLotData) Reset() {
	*x = ParkingLotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLotData) ProtoMessage() {}

func (x *ParkingLotData) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLotData.ProtoReflect.Descriptor instead.
func (*ParkingLotData) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{3}
}

func (x *ParkingLotData) GetParkingLot() *ParkingLot {
	if x != nil {
		return x.ParkingLot
	}
	return nil
}

type GetParkingLotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingLot *GetParkingLot `protobuf:"bytes,1,opt,name=ParkingLot,proto3" json:"ParkingLot,omitempty"`
}

func (x *GetParkingLotData) Reset() {
	*x = GetParkingLotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParkingLotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParkingLotData) ProtoMessage() {}

func (x *GetParkingLotData) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParkingLotData.ProtoReflect.Descriptor instead.
func (*GetParkingLotData) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetParkingLotData) GetParkingLot() *GetParkingLot {
	if x != nil {
		return x.ParkingLot
	}
	return nil
}

// InsertParkingLotRequest ...
type InsertParkingLotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalSpace int32  `protobuf:"varint,2,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`
}

func (x *InsertParkingLotRequest) Reset() {
	*x = InsertParkingLotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertParkingLotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertParkingLotRequest) ProtoMessage() {}

func (x *InsertParkingLotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertParkingLotRequest.ProtoReflect.Descriptor instead.
func (*InsertParkingLotRequest) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{5}
}

func (x *InsertParkingLotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InsertParkingLotRequest) GetTotalSpace() int32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

// InsertParkingLotResponse ...
type InsertParkingLotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ParkingLotData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *InsertParkingLotResponse) Reset() {
	*x = InsertParkingLotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertParkingLotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertParkingLotResponse) ProtoMessage() {}

func (x *InsertParkingLotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertParkingLotResponse.ProtoReflect.Descriptor instead.
func (*InsertParkingLotResponse) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{6}
}

func (x *InsertParkingLotResponse) GetData() *ParkingLotData {
	if x != nil {
		return x.Data
	}
	return nil
}

// ListParkingLotRequest ...
type ListParkingLotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderBy      OrderBy `protobuf:"varint,1,opt,name=OrderBy,proto3,enum=parkinglot.OrderBy" json:"OrderBy,omitempty"`
	SearchTerm   string  `protobuf:"bytes,2,opt,name=SearchTerm,proto3" json:"SearchTerm,omitempty"`
	SortByColumn string  `protobuf:"bytes,3,opt,name=SortByColumn,proto3" json:"SortByColumn,omitempty"`
	Limit        int32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset       int32   `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *ListParkingLotRequest) Reset() {
	*x = ListParkingLotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParkingLotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParkingLotRequest) ProtoMessage() {}

func (x *ListParkingLotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParkingLotRequest.ProtoReflect.Descriptor instead.
func (*ListParkingLotRequest) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{7}
}

func (x *ListParkingLotRequest) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_DESC
}

func (x *ListParkingLotRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *ListParkingLotRequest) GetSortByColumn() string {
	if x != nil {
		return x.SortByColumn
	}
	return ""
}

func (x *ListParkingLotRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListParkingLotRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// ListParkingLotResponse ...
type ListParkingLotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingLot []*ParkingLot `protobuf:"bytes,1,rep,name=ParkingLot,proto3" json:"ParkingLot,omitempty"`
}

func (x *ListParkingLotData) Reset() {
	*x = ListParkingLotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParkingLotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParkingLotData) ProtoMessage() {}

func (x *ListParkingLotData) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParkingLotData.ProtoReflect.Descriptor instead.
func (*ListParkingLotData) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{8}
}

func (x *ListParkingLotData) GetParkingLot() []*ParkingLot {
	if x != nil {
		return x.ParkingLot
	}
	return nil
}

type ListParkingLotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *ListParkingLotData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Total int32               `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ListParkingLotResponse) Reset() {
	*x = ListParkingLotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParkingLotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParkingLotResponse) ProtoMessage() {}

func (x *ListParkingLotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParkingLotResponse.ProtoReflect.Descriptor instead.
func (*ListParkingLotResponse) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{9}
}

func (x *ListParkingLotResponse) GetData() *ListParkingLotData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListParkingLotResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// GetParkingLotRequest ...
type GetParkingLotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetParkingLotRequest) Reset() {
	*x = GetParkingLotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParkingLotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParkingLotRequest) ProtoMessage() {}

func (x *GetParkingLotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParkingLotRequest.ProtoReflect.Descriptor instead.
func (*GetParkingLotRequest) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetParkingLotRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetParkingLotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetParkingLotData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetParkingLotResponse) Reset() {
	*x = GetParkingLotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParkingLotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParkingLotResponse) ProtoMessage() {}

func (x *GetParkingLotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parking_gunk_api_parkinglot_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParkingLotResponse.ProtoReflect.Descriptor instead.
func (*GetParkingLotResponse) Descriptor() ([]byte, []int) {
	return file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetParkingLotResponse) GetData() *GetParkingLotData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_parking_gunk_api_parkinglot_all_proto protoreflect.FileDescriptor

var file_parking_gunk_api_parkinglot_all_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2f, 0x61, 0x6c,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x6c, 0x6f, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01,
	0x00, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00,
	0x80, 0x01, 0x00, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x91, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x09, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x49, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78,
	0x00, 0x80, 0x01, 0x00, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x6c, 0x6f,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x44, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xac, 0x03, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0e, 0x50, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x61, 0x0a, 0x0e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x67, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c,
	0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74,
	0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01,
	0x00, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x1f, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92,
	0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x95, 0x02,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x0f, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52,
	0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x25, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8c, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c,
	0x6f, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x49, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a,
	0x05, 0xd2, 0x01, 0x02, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x78, 0x00, 0x80, 0x01, 0x00, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x2c, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00,
	0x1a, 0x04, 0x08, 0x00, 0x18, 0x00, 0x12, 0x0d, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x1a,
	0x04, 0x08, 0x00, 0x18, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xbe, 0x11, 0x0a, 0x11, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xe6, 0x05, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x82, 0x05, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xe2, 0x04, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x6f, 0x74, 0x12, 0x15, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74,
	0x1a, 0x1d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x4a, 0x5d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x7e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x77, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x43, 0x0a, 0x41, 0x4a,
	0x3f, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x20, 0x7d,
	0x4a, 0x6f, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x68, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12,
	0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34,
	0x30, 0x31, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x20,
	0x7d, 0x4a, 0x5a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x53, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x4a, 0x33, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x34, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x74,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e,
	0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x6c, 0x6f, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xdf, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x81, 0x05, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xe6, 0x04, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x6f, 0x74, 0x12, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x54, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x32,
	0x0a, 0x30, 0x1a, 0x2e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x7e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x77, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x43, 0x0a,
	0x41, 0x4a, 0x3f, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22,
	0x20, 0x7d, 0x4a, 0x6f, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x68, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x34, 0x30, 0x31, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x58, 0x0a, 0x18, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x3c, 0x0a, 0x3a, 0x4a, 0x38, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x34, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f,
	0x74, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x6c, 0x6f,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xd8, 0x05, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xfd, 0x04, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xde, 0x04, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x6f, 0x74, 0x12, 0x16, 0x47, 0x65, 0x74,
	0x20, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x1a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x6c, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5a,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x53, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x7e, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x77, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x43, 0x0a, 0x41, 0x4a, 0x3f, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61,
	0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x20, 0x7d, 0x4a, 0x6f, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x68, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b,
	0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x31, 0x2c, 0x20, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x20, 0x7d, 0x4a, 0x5e, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x3b,
	0x0a, 0x39, 0x4a, 0x37, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30,
	0x34, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x74, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c,
	0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x6c, 0x6f, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x67, 0x65,
	0x74, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x41, 0x48, 0x01, 0x50, 0x00,
	0x5a, 0x26, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x3b, 0x70, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01,
	0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parking_gunk_api_parkinglot_all_proto_rawDescOnce sync.Once
	file_parking_gunk_api_parkinglot_all_proto_rawDescData = file_parking_gunk_api_parkinglot_all_proto_rawDesc
)

func file_parking_gunk_api_parkinglot_all_proto_rawDescGZIP() []byte {
	file_parking_gunk_api_parkinglot_all_proto_rawDescOnce.Do(func() {
		file_parking_gunk_api_parkinglot_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_parking_gunk_api_parkinglot_all_proto_rawDescData)
	})
	return file_parking_gunk_api_parkinglot_all_proto_rawDescData
}

var (
	file_parking_gunk_api_parkinglot_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_parking_gunk_api_parkinglot_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 12)
	file_parking_gunk_api_parkinglot_all_proto_goTypes   = []interface{}{
		(OrderBy)(0),                     // 0: parkinglot.OrderBy
		(*ParkingLot)(nil),               // 1: parkinglot.ParkingLot
		(*ParkedVehicles)(nil),           // 2: parkinglot.ParkedVehicles
		(*GetParkingLot)(nil),            // 3: parkinglot.GetParkingLot
		(*ParkingLotData)(nil),           // 4: parkinglot.ParkingLotData
		(*GetParkingLotData)(nil),        // 5: parkinglot.GetParkingLotData
		(*InsertParkingLotRequest)(nil),  // 6: parkinglot.InsertParkingLotRequest
		(*InsertParkingLotResponse)(nil), // 7: parkinglot.InsertParkingLotResponse
		(*ListParkingLotRequest)(nil),    // 8: parkinglot.ListParkingLotRequest
		(*ListParkingLotData)(nil),       // 9: parkinglot.ListParkingLotData
		(*ListParkingLotResponse)(nil),   // 10: parkinglot.ListParkingLotResponse
		(*GetParkingLotRequest)(nil),     // 11: parkinglot.GetParkingLotRequest
		(*GetParkingLotResponse)(nil),    // 12: parkinglot.GetParkingLotResponse
		(*timestamppb.Timestamp)(nil),    // 13: google.protobuf.Timestamp
	}
)

var file_parking_gunk_api_parkinglot_all_proto_depIdxs = []int32{
	13, // 0: parkinglot.ParkingLot.CreatedAt:type_name -> google.protobuf.Timestamp
	13, // 1: parkinglot.ParkingLot.UpdatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: parkinglot.ParkedVehicles.EntryTime:type_name -> google.protobuf.Timestamp
	2,  // 3: parkinglot.GetParkingLot.ParkedVehicles:type_name -> parkinglot.ParkedVehicles
	13, // 4: parkinglot.GetParkingLot.CreatedAt:type_name -> google.protobuf.Timestamp
	13, // 5: parkinglot.GetParkingLot.UpdatedAt:type_name -> google.protobuf.Timestamp
	1,  // 6: parkinglot.ParkingLotData.ParkingLot:type_name -> parkinglot.ParkingLot
	3,  // 7: parkinglot.GetParkingLotData.ParkingLot:type_name -> parkinglot.GetParkingLot
	4,  // 8: parkinglot.InsertParkingLotResponse.Data:type_name -> parkinglot.ParkingLotData
	0,  // 9: parkinglot.ListParkingLotRequest.OrderBy:type_name -> parkinglot.OrderBy
	1,  // 10: parkinglot.ListParkingLotData.ParkingLot:type_name -> parkinglot.ParkingLot
	9,  // 11: parkinglot.ListParkingLotResponse.Data:type_name -> parkinglot.ListParkingLotData
	5,  // 12: parkinglot.GetParkingLotResponse.Data:type_name -> parkinglot.GetParkingLotData
	6,  // 13: parkinglot.ParkingLotService.InsertParkingLot:input_type -> parkinglot.InsertParkingLotRequest
	8,  // 14: parkinglot.ParkingLotService.ListParkingLot:input_type -> parkinglot.ListParkingLotRequest
	11, // 15: parkinglot.ParkingLotService.GetParkingLot:input_type -> parkinglot.GetParkingLotRequest
	7,  // 16: parkinglot.ParkingLotService.InsertParkingLot:output_type -> parkinglot.InsertParkingLotResponse
	10, // 17: parkinglot.ParkingLotService.ListParkingLot:output_type -> parkinglot.ListParkingLotResponse
	12, // 18: parkinglot.ParkingLotService.GetParkingLot:output_type -> parkinglot.GetParkingLotResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_parking_gunk_api_parkinglot_all_proto_init() }
func file_parking_gunk_api_parkinglot_all_proto_init() {
	if File_parking_gunk_api_parkinglot_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkingLot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkedVehicles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParkingLot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkingLotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParkingLotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertParkingLotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertParkingLotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParkingLotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParkingLotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParkingLotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParkingLotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_gunk_api_parkinglot_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParkingLotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parking_gunk_api_parkinglot_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parking_gunk_api_parkinglot_all_proto_goTypes,
		DependencyIndexes: file_parking_gunk_api_parkinglot_all_proto_depIdxs,
		EnumInfos:         file_parking_gunk_api_parkinglot_all_proto_enumTypes,
		MessageInfos:      file_parking_gunk_api_parkinglot_all_proto_msgTypes,
	}.Build()
	File_parking_gunk_api_parkinglot_all_proto = out.File
	file_parking_gunk_api_parkinglot_all_proto_rawDesc = nil
	file_parking_gunk_api_parkinglot_all_proto_goTypes = nil
	file_parking_gunk_api_parkinglot_all_proto_depIdxs = nil
}
